package dc.human.kimbanbagi.tableJava.servlet;

import dc.human.kimbanbagi.tableJava.dto.*;
import dc.human.kimbanbagi.tableJava.dao.*;

import java.io.IOException;
import java.io.InputStream;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;
import jakarta.servlet.annotation.MultipartConfig;

@WebServlet("/register")
@MultipartConfig
public class RegisterServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    		throws ServletException, IOException {
    	response.setCharacterEncoding("utf-8");
		request.setCharacterEncoding("utf-8");
		
		String userId =request.getParameter("userId");
		
		String restaurantId = request.getParameter("restaurantId");
        String restaurantName = request.getParameter("restaurantName");
        String restaurantHead = request.getParameter("restaurantHead");
        String restaurantCity = request.getParameter("restaurantCity");
        String restaurantAddress = request.getParameter("restaurantAddress");
        String restaurantNumber = request.getParameter("restaurantNumber");
        
        // 식당 등록 시 예약과 웨이팅 기능을 활성화 할 지에 대한 유무를 입력 받음
        String reservationAvailable = request.getParameter("reservationAvailable");
        //예약을 받는 경우 1 받지 않을 경우 0
        if(reservationAvailable != null) {
        	reservationAvailable = "1";
        } else {
        	reservationAvailable = "0";
        }
        String waitingAvailable = request.getParameter("waitingAvailable");
        //웨이팅을 받는 경우 1 받지 않을 경우 0
        if(waitingAvailable != null) {
        	waitingAvailable = "1";
        } else {
        	waitingAvailable = "0";
        }
      
        Part imagePart = request.getPart("restaurantPhoto");

        InputStream inputStream = imagePart.getInputStream();

        RestaurantDTO dto = new RestaurantDTO();
        
        dto.setR_id(restaurantId);
        dto.setR_name(restaurantName);
        dto.setR_head(restaurantHead);
        dto.setR_city(restaurantCity);
        dto.setR_address(restaurantAddress);
        dto.setR_number(restaurantNumber);
        dto.setU_id(userId);
        dto.setR_status(reservationAvailable);
        dto.setW_status(waitingAvailable);
        dto.setR_photo(inputStream);
       
        restaurantDAO dao = new restaurantDAO();
        dao.addRestaurant(dto);
        
        request.setAttribute("userId", userId);
        request.setAttribute("restaurantId", restaurantId);
        
        request.getRequestDispatcher("/ownerMain").forward(request, response);
    }
}